parameters:
  - name: buildNumber
    type: string

steps:
  - task: AzureCLI@2    
    displayName: "Create resource group"
    inputs:
      azureSubscription: "$(azureSubscription)"
      scriptType: "pscore"
      scriptLocation: "inlineScript"
      inlineScript: |
        $ifExists = az group exists -n "$(rgName)"
        if ($ifExists -eq 'false') {
          echo 'creating the resource group'
          az group create -n "$(rgName)" -l "$(rgLocation)"
        }  
        
  - task: AzurePowerShell@4
    displayName: "Delete old deployments"
    inputs:
      azureSubscription: "$(azureSubscription)"
      scriptType: 'inlineScript'
      azurePowerShellVersion: 'latestVersion'
      inline: |        
        $deployments = Get-AzResourceGroupDeployment -ResourceGroupName $(rgName) | Where-Object Timestamp -lt ((Get-Date).AddDays($(deploymentsOlderThan)))

        foreach ($deployment in $deployments) {
          Remove-AzResourceGroupDeployment -ResourceGroupName $(rgName) -Name $deployment.DeploymentName
          Write-Host 'Removed Deployment: ' $deployment.DeploymentName 
        } 

  - task: AzureCLI@2    
    displayName: "Provision resources"
    inputs:
      azureSubscription: "$(azureSubscription)"
      scriptType: "pscore"
      scriptLocation: "inlineScript"
      inlineScript: |    
        az deployment group create `
        --name "purchase-orders-$(buildNumber)" `
        --resource-group "$(rgName)" `
        --template-file "$(Pipeline.Workspace)/deploy/main.bicep" `
        --parameters "buildNumber=$(Build.BuildNumber)" `
        "sgName=$(sgName)" `
        "storageSkuName=$(sgType)" `
        "storageSkuTier=$(sgTier)" `


        